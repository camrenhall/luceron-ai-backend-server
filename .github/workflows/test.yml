name: REST API Database Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  smoke-tests:
    name: Smoke Tests (Fast Feedback)
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Build and start test environment
      run: |
        # Build the main application container
        docker build -t luceron-api:test .
        
        # Start test API container connected to QA database
        docker run -d \
          --name test-api \
          -e DATABASE_URL="${{ secrets.QA_DATABASE_URL }}" \
          -e RESEND_API_KEY="re_test_dummy_key_for_testing_only" \
          -e OPENAI_API_KEY="sk-test_dummy_key_for_testing_only" \
          -e FROM_EMAIL="noreply@testing.local" \
          -e ALERT_FROM_EMAIL="alerts@testing.local" \
          -e ADMIN_ALERT_EMAILS="admin@testing.local" \
          -e RESEND_WEBHOOK_SECRET="whsec_test_dummy_webhook_secret" \
          -e PORT="8080" \
          -e ENV="QA" \
          -e QA_JWT_SECRET="${{ secrets.QA_JWT_SECRET }}" \
          -e LOG_LEVEL="INFO" \
          -e CI="true" \
          -p 8080:8080 \
          luceron-api:test
        
        # Check container status
        echo "Container status:"
        docker ps -a
        echo "Container logs:"
        docker logs test-api
        
        # Wait for API to be ready with more verbose output
        echo "Waiting for API to be ready..."
        for i in {1..30}; do
          # Try multiple endpoints to find one that works
          if curl -f -s http://localhost:8080/health 2>/dev/null || \
             curl -f -s http://localhost:8080/ 2>/dev/null || \
             curl -f -s http://localhost:8080/docs 2>/dev/null; then
            echo "API is ready!"
            break
          else
            echo "Attempt $i: API not ready, waiting 2 seconds..."
            docker logs test-api | tail -10
            sleep 2
          fi
        done
        
        # Final status check
        echo "Final container status:"
        docker ps -a
        echo "Final container logs:"
        docker logs test-api
    
    - name: Run smoke tests (Tavern API Tests)
      env:
        # Test API endpoint (containerized application)
        AGENT_DB_BASE_URL: "http://localhost:8080"
        
        # OAuth Configuration  
        TEST_OAUTH_PRIVATE_KEY: ${{ secrets.TEST_OAUTH_PRIVATE_KEY }}
        OAUTH_SERVICE_ID: "qa_comprehensive_test_service"
        OAUTH_AUDIENCE: "luceron-auth-server"
        
      run: |
        cd tests/rest_db
        pip install -r requirements.txt
        
        # Verify setup before running tests
        python verify_setup.py
        
        # Run Tavern API tests
        python run_tests.py --verbose || {
          echo "Tavern tests failed!"
          exit 1
        }
    
    - name: Cleanup test containers
      if: always()
      run: |
        docker stop test-api || true
        docker rm test-api || true
    
    - name: Upload smoke test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: smoke-test-results
        path: tests/rest_db/*.log

  regression-tests:
    name: Full Regression Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: smoke-tests
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Build and start test environment
      run: |
        # Build the main application container
        docker build -t luceron-api:test .
        
        # Start test API container connected to QA database
        docker run -d \
          --name test-api \
          -e DATABASE_URL="${{ secrets.QA_DATABASE_URL }}" \
          -e RESEND_API_KEY="re_test_dummy_key_for_testing_only" \
          -e OPENAI_API_KEY="sk-test_dummy_key_for_testing_only" \
          -e FROM_EMAIL="noreply@testing.local" \
          -e ALERT_FROM_EMAIL="alerts@testing.local" \
          -e ADMIN_ALERT_EMAILS="admin@testing.local" \
          -e RESEND_WEBHOOK_SECRET="whsec_test_dummy_webhook_secret" \
          -e PORT="8080" \
          -e ENV="QA" \
          -e QA_JWT_SECRET="${{ secrets.QA_JWT_SECRET }}" \
          -e LOG_LEVEL="INFO" \
          -e CI="true" \
          -p 8080:8080 \
          luceron-api:test
        
        # Wait for API to be ready
        timeout 60s bash -c 'until curl -f http://localhost:8080/; do sleep 2; done'
    
    - name: Run regression tests (Tavern API Tests)
      env:
        # Test API endpoint (containerized application)
        AGENT_DB_BASE_URL: "http://localhost:8080"
        
        # OAuth Configuration
        TEST_OAUTH_PRIVATE_KEY: ${{ secrets.TEST_OAUTH_PRIVATE_KEY }}
        OAUTH_SERVICE_ID: "qa_comprehensive_test_service"
        OAUTH_AUDIENCE: "luceron-auth-server"
        
      run: |
        cd tests/rest_db
        pip install -r requirements.txt
        
        # Run all Tavern API tests
        python run_tests.py --verbose
    
    - name: Cleanup test containers
      if: always()
      run: |
        docker stop test-api || true
        docker rm test-api || true
    
    - name: Upload regression test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: regression-test-results
        path: tests/rest_db/*.log

  parallel-full-suite:
    name: Parallel Full Suite (PR Only)
    runs-on: ubuntu-latest
    timeout-minutes: 20
    if: github.event_name == 'pull_request'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Build and start test environment
      run: |
        # Build the main application container
        docker build -t luceron-api:test .
        
        # Start test API container connected to QA database
        docker run -d \
          --name test-api \
          -e DATABASE_URL="${{ secrets.QA_DATABASE_URL }}" \
          -e RESEND_API_KEY="re_test_dummy_key_for_testing_only" \
          -e OPENAI_API_KEY="sk-test_dummy_key_for_testing_only" \
          -e FROM_EMAIL="noreply@testing.local" \
          -e ALERT_FROM_EMAIL="alerts@testing.local" \
          -e ADMIN_ALERT_EMAILS="admin@testing.local" \
          -e RESEND_WEBHOOK_SECRET="whsec_test_dummy_webhook_secret" \
          -e PORT="8080" \
          -e ENV="QA" \
          -e QA_JWT_SECRET="${{ secrets.QA_JWT_SECRET }}" \
          -e LOG_LEVEL="INFO" \
          -e CI="true" \
          -p 8080:8080 \
          luceron-api:test
        
        # Wait for API to be ready
        timeout 60s bash -c 'until curl -f http://localhost:8080/; do sleep 2; done'
    
    - name: Run parallel tests (Tavern API Tests)
      env:
        # Test API endpoint (containerized application)
        AGENT_DB_BASE_URL: "http://localhost:8080"
        
        # OAuth Configuration
        TEST_OAUTH_PRIVATE_KEY: ${{ secrets.TEST_OAUTH_PRIVATE_KEY }}
        OAUTH_SERVICE_ID: "qa_comprehensive_test_service"
        OAUTH_AUDIENCE: "luceron-auth-server"
        
      run: |
        cd tests/rest_db
        pip install -r requirements.txt
        
        # Run all Tavern API tests
        python run_tests.py --verbose
    
    - name: Cleanup test containers
      if: always()
      run: |
        docker stop test-api || true
        docker rm test-api || true
    
    - name: Upload parallel test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: parallel-test-results
        path: tests/rest_db/*.log