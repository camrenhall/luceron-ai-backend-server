name: CRUD Comprehensive Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  smoke-tests:
    name: Smoke Tests (Fast Feedback)
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Build and start test environment
      run: |
        # Build the main application container
        docker build -t luceron-api:test .
        
        # Start test API container connected to QA database
        docker run -d \
          --name test-api \
          -e DATABASE_URL="${{ secrets.QA_DATABASE_URL }}" \
          -e RESEND_API_KEY="dummy_resend_key_for_testing" \
          -e OPENAI_API_KEY="dummy_openai_key_for_testing" \
          -e ENVIRONMENT="test" \
          -e ENABLE_AUTH="false" \
          -e ENABLE_EXTERNAL_APIS="false" \
          -e LOG_LEVEL="INFO" \
          -e CI="true" \
          -p 8080:8080 \
          luceron-api:test
        
        # Wait for API to be ready
        timeout 60s bash -c 'until curl -f http://localhost:8080/; do sleep 2; done'
    
    - name: Run smoke tests (QA Database)
      env:
        # QA Database for testing (same as container)
        QA_DATABASE_URL: ${{ secrets.QA_DATABASE_URL }}
        
        # Test API endpoint (containerized application)
        TEST_API_BASE_URL: "http://localhost:8080"
        
        # Test configuration
        DB_MODE: "qa"
        ENVIRONMENT: "test"
        OAUTH_PRIVATE_KEY: ""
        
      run: |
        cd tests/crud_comprehensive
        pip install -r requirements.txt
        python runners/unified_runner.py --mode smoke --db-mode qa --output json --verbose || {
          echo "Tests failed, showing detailed pytest output:"
          if [ -f test-results.json ]; then
            echo "=== PYTEST RESULTS JSON ==="
            cat test-results.json
            echo -e "\n=== EXTRACTING ERROR DETAILS ==="
            python3 debug_test_results.py
          else
            echo "No test results file found"
          fi
          exit 1
        }
    
    - name: Cleanup test containers
      if: always()
      run: |
        docker stop test-api || true
        docker rm test-api || true
    
    - name: Upload smoke test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: smoke-test-results
        path: tests/crud_comprehensive/test-results.*

  regression-tests:
    name: Full Regression Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: smoke-tests
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Build and start test environment
      run: |
        # Build the main application container
        docker build -t luceron-api:test .
        
        # Start test API container connected to QA database
        docker run -d \
          --name test-api \
          -e DATABASE_URL="${{ secrets.QA_DATABASE_URL }}" \
          -e RESEND_API_KEY="dummy_resend_key_for_testing" \
          -e OPENAI_API_KEY="dummy_openai_key_for_testing" \
          -e ENVIRONMENT="test" \
          -e ENABLE_AUTH="false" \
          -e ENABLE_EXTERNAL_APIS="false" \
          -e LOG_LEVEL="INFO" \
          -e CI="true" \
          -p 8080:8080 \
          luceron-api:test
        
        # Wait for API to be ready
        timeout 60s bash -c 'until curl -f http://localhost:8080/; do sleep 2; done'
    
    - name: Run regression tests (QA Database)
      env:
        # QA Database for testing (same as container)
        QA_DATABASE_URL: ${{ secrets.QA_DATABASE_URL }}
        
        # Test API endpoint (containerized application)
        TEST_API_BASE_URL: "http://localhost:8080"
        
        # Test configuration
        DB_MODE: "qa"
        ENVIRONMENT: "test"
        OAUTH_PRIVATE_KEY: ""
        
      run: |
        cd tests/crud_comprehensive
        pip install -r requirements.txt
        python runners/unified_runner.py --mode regression --db-mode qa --coverage --parallel --workers 2 --output json --verbose
    
    - name: Cleanup test containers
      if: always()
      run: |
        docker stop test-api || true
        docker rm test-api || true
    
    - name: Upload regression test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: regression-test-results
        path: |
          tests/crud_comprehensive/test-results.*
          tests/crud_comprehensive/coverage.xml

  parallel-full-suite:
    name: Parallel Full Suite (PR Only)
    runs-on: ubuntu-latest
    timeout-minutes: 20
    if: github.event_name == 'pull_request'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Build and start test environment
      run: |
        # Build the main application container
        docker build -t luceron-api:test .
        
        # Start test API container connected to QA database
        docker run -d \
          --name test-api \
          -e DATABASE_URL="${{ secrets.QA_DATABASE_URL }}" \
          -e RESEND_API_KEY="dummy_resend_key_for_testing" \
          -e OPENAI_API_KEY="dummy_openai_key_for_testing" \
          -e ENVIRONMENT="test" \
          -e ENABLE_AUTH="false" \
          -e ENABLE_EXTERNAL_APIS="false" \
          -e LOG_LEVEL="INFO" \
          -e CI="true" \
          -p 8080:8080 \
          luceron-api:test
        
        # Wait for API to be ready
        timeout 60s bash -c 'until curl -f http://localhost:8080/; do sleep 2; done'
    
    - name: Run parallel tests (QA Database)
      env:
        # QA Database for testing (same as container)
        QA_DATABASE_URL: ${{ secrets.QA_DATABASE_URL }}
        
        # Test API endpoint (containerized application)
        TEST_API_BASE_URL: "http://localhost:8080"
        
        # Test configuration
        DB_MODE: "qa"
        ENVIRONMENT: "test"
        OAUTH_PRIVATE_KEY: ""
        
      run: |
        cd tests/crud_comprehensive
        pip install -r requirements.txt
        python runners/unified_runner.py --mode full --db-mode qa --coverage --parallel --workers auto --output json
    
    - name: Cleanup test containers
      if: always()
      run: |
        docker stop test-api || true
        docker rm test-api || true
    
    - name: Upload parallel test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: parallel-test-results
        path: |
          tests/crud_comprehensive/test-results.*
          tests/crud_comprehensive/coverage.xml