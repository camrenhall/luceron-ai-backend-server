version: '3.8'

services:
  # Test Database (isolated)
  test-database:
    image: postgres:15
    environment:
      POSTGRES_DB: test_luceron_db
      POSTGRES_USER: test_user
      POSTGRES_PASSWORD: test_pass
      POSTGRES_HOST_AUTH_METHOD: trust
    # In-memory database for speed
    tmpfs:
      - /var/lib/postgresql/data:rw,noexec,nosuid,size=512m
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U test_user -d test_luceron_db"]
      interval: 2s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - test-network

  # Test API Container (your backend)
  test-api:
    build:
      context: ../../../  # Build from project root
      dockerfile: Dockerfile
    environment:
      # Point to test database
      DATABASE_URL: "postgresql://test_user:test_pass@test-database:5432/test_luceron_db"
      
      # Test environment settings
      ENVIRONMENT: "test"
      LOG_LEVEL: "INFO"
      
      # Dummy keys for testing
      RESEND_API_KEY: "dummy_resend_key_for_testing"
      
      # OAuth test configuration
      OAUTH_SERVICE_ID: "test_service"
      OAUTH_AUDIENCE: "test-auth-server"
      OAUTH_PRIVATE_KEY: |
        -----BEGIN RSA PRIVATE KEY-----
        # Dummy test private key - replace with actual test key
        -----END RSA PRIVATE KEY-----
      
      # Disable external services in test mode
      ENABLE_EXTERNAL_APIS: "false"
      
    ports:
      - "8080:8080"
    depends_on:
      test-database:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - test-network
    # Resource limits for CI
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  # Test Runner (runs the actual tests)
  test-runner:
    build:
      context: .
      dockerfile: Dockerfile.test-runner
    environment:
      # Schema extraction from production (READ-ONLY)
      DATABASE_URL: "${PRODUCTION_DATABASE_URL}"
      
      # Test API endpoint (containerized)
      TEST_API_BASE_URL: "http://test-api:8080"
      
      # Test database for operations
      TEST_DATABASE_URL: "postgresql://test_user:test_pass@test-database:5432/test_luceron_db"
      
      # Test configuration
      DB_MODE: "isolated"
      TEST_DB_ENGINE: "container"
      FAIL_ON_SCHEMA_CHANGES: "true"
      
      # Dummy OAuth for test API
      OAUTH_SERVICE_ID: "test_service"
      OAUTH_AUDIENCE: "test-auth-server"
      OAUTH_PRIVATE_KEY: "dummy_test_key"
      
    depends_on:
      test-api:
        condition: service_healthy
      test-database:
        condition: service_healthy
    volumes:
      - ./test-results:/app/test-results
    networks:
      - test-network
    command: |
      sh -c "
        echo 'ðŸš€ Starting comprehensive test suite...'
        python runners/unified_runner.py --mode regression --db-mode isolated --coverage --output json --verbose
      "

networks:
  test-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16

volumes:
  test-results: